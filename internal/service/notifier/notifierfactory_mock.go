// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/notifier/notifierfactory.go

// Package notifier is a generated GoMock package.
package notifier

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nht1206/pricetracker/internal/model"
)

// MockNotifierFactory is a mock of NotifierFactory interface.
type MockNotifierFactory struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierFactoryMockRecorder
}

// MockNotifierFactoryMockRecorder is the mock recorder for MockNotifierFactory.
type MockNotifierFactoryMockRecorder struct {
	mock *MockNotifierFactory
}

// NewMockNotifierFactory creates a new mock instance.
func NewMockNotifierFactory(ctrl *gomock.Controller) *MockNotifierFactory {
	mock := &MockNotifierFactory{ctrl: ctrl}
	mock.recorder = &MockNotifierFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifierFactory) EXPECT() *MockNotifierFactoryMockRecorder {
	return m.recorder
}

// CreateNotifier mocks base method.
func (m *MockNotifierFactory) CreateNotifier(followType uint) (Notifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotifier", followType)
	ret0, _ := ret[0].(Notifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotifier indicates an expected call of CreateNotifier.
func (mr *MockNotifierFactoryMockRecorder) CreateNotifier(followType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotifier", reflect.TypeOf((*MockNotifierFactory)(nil).CreateNotifier), followType)
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotifier) Notify(user *model.User, result *model.TrackingResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", user, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(user, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), user, result)
}
